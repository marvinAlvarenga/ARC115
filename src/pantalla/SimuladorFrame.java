/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pantalla;

import cache.Cache;
import cache.Linea;
import cpu.Direccionamiento;
import cpu.Peticion;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utilidades.Validador;

/**
 *
 * @author Marvin
 */
public class SimuladorFrame extends javax.swing.JFrame {

    private int capacidadRam = (int) Math.pow(2, 20);
    private int capacidadCache = (int) Math.pow(2, 10);
    private int numLineas = capacidadCache / Cache.TAMANIO_BLOQUE;
    private int numConjuntos = numLineas / 2;

    List<String> RAM = new ArrayList<>();
    List<Linea> CACHE = new ArrayList<>();
    LinkedList<Peticion> colaPeticiones = new LinkedList<>();

    //LISTA QUE DAN SOPORTE A REEMPLAZAMIENTO FIFO Y LRU DE LA TOTALMENTE ASOCIATIVA
    List<Integer> CAFIFO = new ArrayList<>();
    List<Integer> CALRU = new ArrayList<>();
    private int lineasUsarAsociativa = 3;

    /**
     * Creates new form SimuladorFrame
     */
    public SimuladorFrame() {
        initComponents();

        //Crear una RAM
        for (int i = 0; i < capacidadRam; i++) {
            RAM.add("00");
        }
        System.out.println(RAM.size());

        DefaultTableModel tCache = (DefaultTableModel) tablaLineasCache.getModel();

        //Crear la CACHE, inicializarla e inicializar la tabla
        for (int j = 0; j < numLineas; j++) {
            Linea l = new Linea();
            l.inicializarElementos();
            CACHE.add(l);

            tCache.addRow(new Object[]{j, l.linea.get(0), l.linea.get(1), l.linea.get(2), l.linea.get(3), l.linea.get(4), l.linea.get(5), l.linea.get(6), l.linea.get(7)});
        }
        System.out.println(CACHE.size());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel15 = new javax.swing.JLabel();
        jPanelCPU = new javax.swing.JPanel();
        jPanelRegistrosCPU = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtAX = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtBX = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCX = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDX = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtSI = new javax.swing.JTextField();
        txtDI = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtSP = new javax.swing.JTextField();
        txtBP = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtSS = new javax.swing.JTextField();
        txtCS = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtDS = new javax.swing.JTextField();
        txtES = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        PC = new javax.swing.JTextField();
        jPanelPeticionesCPU = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPeticiones = new javax.swing.JTable();
        eliminarPeticion = new javax.swing.JButton();
        jPanelIngresarCPU = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        direccionCPU = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        metDireccionamiento = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        regUsar = new javax.swing.JComboBox<>();
        agregarPeticion = new javax.swing.JButton();
        procesar = new javax.swing.JButton();
        jPanelCache = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        correspondencia = new javax.swing.JComboBox<>();
        sustitucion = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaLineasCache = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        aciertos = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaPasosRealizados = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaResultados = new javax.swing.JTable();
        txtRestablecer = new javax.swing.JButton();
        jPanelRAM = new javax.swing.JPanel();
        jPanelIngresarCPU1 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        direccionRAM = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        metDireccionamientoRAM = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        regUsarRAM = new javax.swing.JComboBox<>();
        escribirRam = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        txtEscribirRAM = new javax.swing.JTextField();

        jLabel15.setText("jLabel15");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulador");

        jPanelCPU.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CPU", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jPanelRegistrosCPU.setBorder(javax.swing.BorderFactory.createTitledBorder("Registros"));

        jLabel2.setText("AX");

        txtAX.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAXKeyTyped(evt);
            }
        });

        jLabel3.setText("BX");

        txtBX.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBXKeyTyped(evt);
            }
        });

        jLabel4.setText("CX");

        txtCX.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCXKeyTyped(evt);
            }
        });

        jLabel5.setText("DX");

        txtDX.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDXKeyTyped(evt);
            }
        });

        jLabel6.setText("SI");

        jLabel7.setText("DI");

        txtSI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSIKeyTyped(evt);
            }
        });

        txtDI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDIKeyTyped(evt);
            }
        });

        jLabel8.setText("SP");

        txtSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSPKeyTyped(evt);
            }
        });

        txtBP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBPKeyTyped(evt);
            }
        });

        jLabel9.setText("BP");

        jLabel10.setText("SS");

        jLabel11.setText("CS");

        txtSS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSSKeyTyped(evt);
            }
        });

        txtCS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCSKeyTyped(evt);
            }
        });

        jLabel12.setText("DS");

        txtDS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDSKeyTyped(evt);
            }
        });

        txtES.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtESKeyTyped(evt);
            }
        });

        jLabel13.setText("ES");

        jLabel14.setText("PC");

        PC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PCKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelRegistrosCPULayout = new javax.swing.GroupLayout(jPanelRegistrosCPU);
        jPanelRegistrosCPU.setLayout(jPanelRegistrosCPULayout);
        jPanelRegistrosCPULayout.setHorizontalGroup(
            jPanelRegistrosCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRegistrosCPULayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRegistrosCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelRegistrosCPULayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAX, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtBX, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCX, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDX, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSP, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelRegistrosCPULayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtBP, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addGap(16, 16, 16)
                        .addComponent(txtSI, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addGap(12, 12, 12)
                        .addComponent(txtDI, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDS, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtES, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelRegistrosCPULayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSS, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCS, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PC, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelRegistrosCPULayout.setVerticalGroup(
            jPanelRegistrosCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRegistrosCPULayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRegistrosCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtAX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtBX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtCX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtDX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelRegistrosCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtBP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtSI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtDI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(txtDS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(txtES, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelRegistrosCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelRegistrosCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(PC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelRegistrosCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(txtSS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(txtCS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelPeticionesCPU.setBorder(javax.swing.BorderFactory.createTitledBorder("Peticiones CPU"));

        tablaPeticiones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Direccion", "Direccionamiento", "Registro", "Val. Registro"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaPeticiones);

        eliminarPeticion.setText("Eliminar");
        eliminarPeticion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarPeticionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPeticionesCPULayout = new javax.swing.GroupLayout(jPanelPeticionesCPU);
        jPanelPeticionesCPU.setLayout(jPanelPeticionesCPULayout);
        jPanelPeticionesCPULayout.setHorizontalGroup(
            jPanelPeticionesCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPeticionesCPULayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPeticionesCPULayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(eliminarPeticion)
                .addGap(28, 28, 28))
        );
        jPanelPeticionesCPULayout.setVerticalGroup(
            jPanelPeticionesCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPeticionesCPULayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eliminarPeticion)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelIngresarCPU.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingresar Peticion"));

        jLabel16.setText("Direccion a acceder:");

        direccionCPU.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                direccionCPUKeyTyped(evt);
            }
        });

        jLabel17.setText("Método de direccionamiento:");

        metDireccionamiento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Directo", "Indirecto con Registro", "Desplazamiento Relativo", "Desplazamiento Registro Base", "Indexado" }));
        metDireccionamiento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                metDireccionamientoItemStateChanged(evt);
            }
        });
        metDireccionamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metDireccionamientoActionPerformed(evt);
            }
        });

        jLabel18.setText("Registro a usar:");
        jLabel18.setEnabled(false);

        regUsar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AX", "BX", "CX", "DX", "SP", "BP", "SI", "DI", "DS", "ES", "SS", "CS", "PC" }));
        regUsar.setEnabled(false);

        agregarPeticion.setText("Agregar Peticion");
        agregarPeticion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarPeticionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelIngresarCPULayout = new javax.swing.GroupLayout(jPanelIngresarCPU);
        jPanelIngresarCPU.setLayout(jPanelIngresarCPULayout);
        jPanelIngresarCPULayout.setHorizontalGroup(
            jPanelIngresarCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIngresarCPULayout.createSequentialGroup()
                .addGroup(jPanelIngresarCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelIngresarCPULayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(regUsar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelIngresarCPULayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(metDireccionamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelIngresarCPULayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(direccionCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelIngresarCPULayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(agregarPeticion)
                .addGap(41, 41, 41))
        );
        jPanelIngresarCPULayout.setVerticalGroup(
            jPanelIngresarCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIngresarCPULayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelIngresarCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(direccionCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIngresarCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(metDireccionamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIngresarCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regUsar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(18, 18, 18)
                .addComponent(agregarPeticion)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        procesar.setText("Procesar");
        procesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                procesarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCPULayout = new javax.swing.GroupLayout(jPanelCPU);
        jPanelCPU.setLayout(jPanelCPULayout);
        jPanelCPULayout.setHorizontalGroup(
            jPanelCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelPeticionesCPU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelRegistrosCPU, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelIngresarCPU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelCPULayout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(procesar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelCPULayout.setVerticalGroup(
            jPanelCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCPULayout.createSequentialGroup()
                .addComponent(jPanelRegistrosCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelPeticionesCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelIngresarCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(procesar)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        jPanelCache.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cache", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuracion"));

        jLabel1.setText("Función de Correspondencia:");

        jLabel19.setText("Algoritmo de Sustitución:");
        jLabel19.setEnabled(false);

        correspondencia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Directa", "Asosiativa", "Asociativa por Conjunto" }));
        correspondencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correspondenciaActionPerformed(evt);
            }
        });

        sustitucion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LRU", "FIFO" }));
        sustitucion.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel19))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(correspondencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sustitucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(correspondencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(sustitucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Lineas Cache"));

        tablaLineasCache.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Linea", "0", "1", "2", "3", "4", "5", "6", "7"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaLineasCache);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("En Ejecucion"));

        jLabel22.setText("Numero de Aciertos:");

        aciertos.setEditable(false);

        tablaPasosRealizados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pasos Realizados"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tablaPasosRealizados);

        tablaResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Resultados"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tablaResultados);
        if (tablaResultados.getColumnModel().getColumnCount() > 0) {
            tablaResultados.getColumnModel().getColumn(0).setResizable(false);
        }

        txtRestablecer.setText("Restablecer");
        txtRestablecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRestablecerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel22)
                        .addGap(37, 37, 37)
                        .addComponent(aciertos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(txtRestablecer))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(aciertos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRestablecer))
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout jPanelCacheLayout = new javax.swing.GroupLayout(jPanelCache);
        jPanelCache.setLayout(jPanelCacheLayout);
        jPanelCacheLayout.setHorizontalGroup(
            jPanelCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCacheLayout.createSequentialGroup()
                .addGroup(jPanelCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelCacheLayout.setVerticalGroup(
            jPanelCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCacheLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelRAM.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "RAM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jPanelIngresarCPU1.setBorder(javax.swing.BorderFactory.createTitledBorder("Escribir en RAM"));

        jLabel23.setText("Direccion a escribir:");

        direccionRAM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                direccionRAMKeyTyped(evt);
            }
        });

        jLabel24.setText("Método de direccionamiento:");

        metDireccionamientoRAM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Directo", "Indirecto con Registro", "Desplazamiento Relativo", "Desplazamiento Registro Base", "Indexado" }));
        metDireccionamientoRAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metDireccionamientoRAMActionPerformed(evt);
            }
        });

        jLabel25.setText("Registro a usar:");
        jLabel25.setEnabled(false);

        regUsarRAM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AX", "BX", "CX", "DX", "SP", "BP", "SI", "DI", "DS", "ES", "SS", "CS", "PC" }));
        regUsarRAM.setEnabled(false);

        escribirRam.setText("Escribir en RAM");
        escribirRam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escribirRamActionPerformed(evt);
            }
        });

        jLabel26.setText("Dato:");

        txtEscribirRAM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEscribirRAMKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelIngresarCPU1Layout = new javax.swing.GroupLayout(jPanelIngresarCPU1);
        jPanelIngresarCPU1.setLayout(jPanelIngresarCPU1Layout);
        jPanelIngresarCPU1Layout.setHorizontalGroup(
            jPanelIngresarCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIngresarCPU1Layout.createSequentialGroup()
                .addGroup(jPanelIngresarCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelIngresarCPU1Layout.createSequentialGroup()
                        .addGroup(jPanelIngresarCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelIngresarCPU1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(metDireccionamientoRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelIngresarCPU1Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(direccionRAM, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelIngresarCPU1Layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addGroup(jPanelIngresarCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel25))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelIngresarCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(regUsarRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEscribirRAM, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 72, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelIngresarCPU1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(escribirRam)))
                .addContainerGap())
        );
        jPanelIngresarCPU1Layout.setVerticalGroup(
            jPanelIngresarCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIngresarCPU1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelIngresarCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(direccionRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIngresarCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(metDireccionamientoRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelIngresarCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regUsarRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addGap(18, 18, 18)
                .addGroup(jPanelIngresarCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(txtEscribirRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(escribirRam)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelRAMLayout = new javax.swing.GroupLayout(jPanelRAM);
        jPanelRAM.setLayout(jPanelRAMLayout);
        jPanelRAMLayout.setHorizontalGroup(
            jPanelRAMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRAMLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelIngresarCPU1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
        );
        jPanelRAMLayout.setVerticalGroup(
            jPanelRAMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRAMLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanelIngresarCPU1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelCache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelCPU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelCache, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelRAM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAXKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAXKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtAX.getText().length());
    }//GEN-LAST:event_txtAXKeyTyped

    private void txtBXKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBXKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtBX.getText().length());
    }//GEN-LAST:event_txtBXKeyTyped

    private void txtCXKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCXKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtCX.getText().length());
    }//GEN-LAST:event_txtCXKeyTyped

    private void txtDXKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDXKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtDX.getText().length());
    }//GEN-LAST:event_txtDXKeyTyped

    private void txtSPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSPKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtSP.getText().length());
    }//GEN-LAST:event_txtSPKeyTyped

    private void txtBPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBPKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtBP.getText().length());
    }//GEN-LAST:event_txtBPKeyTyped

    private void txtSIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSIKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtSI.getText().length());
    }//GEN-LAST:event_txtSIKeyTyped

    private void txtDIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDIKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtDI.getText().length());
    }//GEN-LAST:event_txtDIKeyTyped

    private void txtDSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDSKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtDS.getText().length());
    }//GEN-LAST:event_txtDSKeyTyped

    private void txtESKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtESKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtES.getText().length());
    }//GEN-LAST:event_txtESKeyTyped

    private void txtSSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSSKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtSS.getText().length());
    }//GEN-LAST:event_txtSSKeyTyped

    private void txtCSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCSKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, txtCS.getText().length());
    }//GEN-LAST:event_txtCSKeyTyped

    private void PCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PCKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, PC.getText().length());
    }//GEN-LAST:event_PCKeyTyped

    private void direccionCPUKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_direccionCPUKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, direccionCPU.getText().length());
    }//GEN-LAST:event_direccionCPUKeyTyped

    private void direccionRAMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_direccionRAMKeyTyped
        Validador.validarBytesHexa(evt, Validador.DOS_BYTES, direccionRAM.getText().length());
    }//GEN-LAST:event_direccionRAMKeyTyped

    private void txtEscribirRAMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEscribirRAMKeyTyped
        Validador.validarBytesHexa(evt, Validador.UN_BYTE, txtEscribirRAM.getText().length());
    }//GEN-LAST:event_txtEscribirRAMKeyTyped

    private void metDireccionamientoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_metDireccionamientoItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_metDireccionamientoItemStateChanged

    private void metDireccionamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metDireccionamientoActionPerformed
        if (metDireccionamiento.getSelectedIndex() == Direccionamiento.INDIRECTO_REGISTRO || metDireccionamiento.getSelectedIndex() == Direccionamiento.DESPLAZA_REGISTRO_BASE || metDireccionamiento.getSelectedIndex() == Direccionamiento.INDEXADO) {
            jLabel18.setEnabled(true);
            regUsar.setEnabled(true);
        } else {
            jLabel18.setEnabled(false);
            regUsar.setEnabled(false);
        }
    }//GEN-LAST:event_metDireccionamientoActionPerformed

    private void metDireccionamientoRAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metDireccionamientoRAMActionPerformed
        if (metDireccionamientoRAM.getSelectedIndex() == Direccionamiento.INDIRECTO_REGISTRO || metDireccionamientoRAM.getSelectedIndex() == Direccionamiento.DESPLAZA_REGISTRO_BASE || metDireccionamiento.getSelectedIndex() == Direccionamiento.INDEXADO) {
            jLabel25.setEnabled(true);
            regUsarRAM.setEnabled(true);
        } else {
            jLabel25.setEnabled(false);
            regUsarRAM.setEnabled(false);
        }
    }//GEN-LAST:event_metDireccionamientoRAMActionPerformed

    private void agregarPeticionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarPeticionActionPerformed
        String dir = direccionCPU.getText();
        int elementoSelect = metDireccionamiento.getSelectedIndex();
        DefaultTableModel tabPeti = (DefaultTableModel) tablaPeticiones.getModel();
        if (!dir.isEmpty() || elementoSelect == Direccionamiento.INDIRECTO_REGISTRO) {

            Peticion peti = new Peticion();
            peti.direccion = dir;
            peti.metodoDireccion = elementoSelect;

            switch (elementoSelect) {
                case Direccionamiento.DIRECTO:
                case Direccionamiento.PILA:
                    tabPeti.addRow(new Object[]{dir, metDireccionamiento.getSelectedItem()});
                    break;
                case Direccionamiento.DESPLAZA_RELATIVO:
                    String registroU = "PC";
                    String valoR = PC.getText();
                    if (valoR.isEmpty() || valoR == null) {
                        peti.valorRegistro = String.valueOf(0);
                        tabPeti.addRow(new Object[]{dir, metDireccionamiento.getSelectedItem(), registroU, "0"});
                    } else {
                        peti.valorRegistro = valoR;
                        tabPeti.addRow(new Object[]{dir, metDireccionamiento.getSelectedItem(), registroU, valoR});
                    }
                    break;
                case Direccionamiento.INDIRECTO_REGISTRO:
                case Direccionamiento.DESPLAZA_REGISTRO_BASE:
                case Direccionamiento.INDEXADO:
                    String registroUsar = (String) regUsar.getSelectedItem();
                    String valorRegistro = null;
                    if (registroUsar == "AX") {
                        valorRegistro = txtAX.getText();
                    } else if (registroUsar == "BX") {
                        valorRegistro = txtBX.getText();
                    } else if (registroUsar == "CX") {
                        valorRegistro = txtCX.getText();
                    } else if (registroUsar == "DX") {
                        valorRegistro = txtDX.getText();
                    } else if (registroUsar == "SP") {
                        valorRegistro = txtSP.getText();
                    } else if (registroUsar == "BP") {
                        valorRegistro = txtBP.getText();
                    } else if (registroUsar == "SI") {
                        valorRegistro = txtSI.getText();
                    } else if (registroUsar == "DI") {
                        valorRegistro = txtDI.getText();
                    } else if (registroUsar == "DS") {
                        valorRegistro = txtDS.getText();
                    } else if (registroUsar == "ES") {
                        valorRegistro = txtES.getText();
                    } else if (registroUsar == "SS") {
                        valorRegistro = txtSS.getText();
                    } else if (registroUsar == "CS") {
                        valorRegistro = txtCS.getText();
                    } else if (registroUsar == "PC") {
                        valorRegistro = PC.getText();
                    }
                    if (valorRegistro.isEmpty() || valorRegistro == null) {
                        valorRegistro = "0";
                    }
                    peti.valorRegistro = valorRegistro;
                    tabPeti.addRow(new Object[]{dir, metDireccionamiento.getSelectedItem(), registroUsar, valorRegistro});
                    break;
            }
            colaPeticiones.offer(peti);
        } else {
            JOptionPane.showMessageDialog(this, "El campo de direcciones no puede estar vacio", "No Nulo", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_agregarPeticionActionPerformed

    private void eliminarPeticionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarPeticionActionPerformed
        DefaultTableModel tabla = (DefaultTableModel) tablaPeticiones.getModel();
        int[] filas = tablaPeticiones.getSelectedRows();
        for (int fila : filas) {
            for (int i = 0; i < filas.length; i++) {
                filas[i]--;
            }
            tabla.removeRow(fila);
            colaPeticiones.remove(fila);
        }
        System.out.println(colaPeticiones.size());
    }//GEN-LAST:event_eliminarPeticionActionPerformed

    private void correspondenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correspondenciaActionPerformed
        if (correspondencia.getSelectedIndex() != Cache.CORRESPONDENCIA_DIRECTA) {
            jLabel19.setEnabled(true);
            sustitucion.setEnabled(true);
        } else {
            jLabel19.setEnabled(false);
            sustitucion.setEnabled(false);
        }
    }//GEN-LAST:event_correspondenciaActionPerformed

    private void procesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_procesarActionPerformed

        this.aciertos.setText("");

        DefaultTableModel pasos2 = (DefaultTableModel) tablaPasosRealizados.getModel();
        DefaultTableModel result2 = (DefaultTableModel) tablaResultados.getModel();

        for (int i = tablaPasosRealizados.getRowCount() - 1; i >= 0; i--) { //Limpiar tabla de Pasos Realizados
            pasos2.removeRow(i);
        }

        for (int i = tablaResultados.getRowCount() - 1; i >= 0; i--) { //Limpiar tabla de Datos devueltos al CPU
            result2.removeRow(i);
        }

        int tipoCorrespondencia = correspondencia.getSelectedIndex();
        int metodoSustitucion = sustitucion.getSelectedIndex();
        int aciertos = 0;

        DefaultTableModel pasos = (DefaultTableModel) tablaPasosRealizados.getModel();
        DefaultTableModel resultados = (DefaultTableModel) tablaResultados.getModel();
        DefaultTableModel cache = (DefaultTableModel) tablaLineasCache.getModel();

        try {
            for (Peticion p : colaPeticiones) {
                pasos.addRow(new Object[]{"Calculando Dir. Fisica"});

                String dir = Direccionamiento.generarDireccionFisica(p);

                pasos.addRow(new Object[]{"Dir. Fisica: " + dir});
                pasos.addRow(new Object[]{"Verificando cache"});

                String etiqueta = Cache.generarEtiqueta(dir, tipoCorrespondencia);
                int numBloque = Cache.generarBloqueMP(dir);
                int palabra = Cache.generarPalabra(dir);
                String dato = null;

                if (tipoCorrespondencia == Cache.CORRESPONDENCIA_DIRECTA) {
                    int numLinea = numBloque % numLineas;
                    Linea l = CACHE.get(numLinea);
                    if (l.etiqueta != null && l.etiqueta.equals(etiqueta)) {
                        aciertos++;
                        this.aciertos.setText(String.valueOf(aciertos));
                        pasos.addRow(new Object[]{"Acierto en Cache. Linea: " + numLinea});
                        dato = l.linea.get(palabra);
                        pasos.addRow(new Object[]{"Devolviendo dato a CPU. Palabra: " + palabra});
                        resultados.addRow(new Object[]{dato});
                    } else { //Fallo de cache. Traer bloque de RAM
                        pasos.addRow(new Object[]{"Fallo en Cache"});
                        pasos.addRow(new Object[]{"Actualizando Cache. Linea: " + numLinea});
                        pasos.addRow(new Object[]{"Devolviendo dato a CPU. Palabra: " + palabra});
                        dato = RAM.get(numBloque * Cache.TAMANIO_BLOQUE + palabra);
                        resultados.addRow(new Object[]{dato});
                        l.etiqueta = etiqueta;
                        for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                            l.linea.set(i, RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i));
                            cache.setValueAt(RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i), numLinea, i + 1);
                        }
                    }

                } else if (tipoCorrespondencia == Cache.CORRESPONDENCIA_POR_CONJUNTO) {
                    int numConjunto = numBloque % numConjuntos;
                    int lineaInicialDeConjunto = numConjunto * 2; //Calcular la linea inicial del conjunto de dos vias
                    Linea lineaI = CACHE.get(lineaInicialDeConjunto); //Consultar la primera linea del conjunto
                    Linea lineaII = CACHE.get(lineaInicialDeConjunto + 1); //Consultar la segunda linea del conjunto
                    if (lineaI.etiqueta != null && lineaI.etiqueta.equals(etiqueta)) { //Comprobando la primera via del conjunto
                        aciertos++;
                        this.aciertos.setText(String.valueOf(aciertos));
                        pasos.addRow(new Object[]{"Acierto en Cache. Conjunto: " + numConjunto});
                        pasos.addRow(new Object[]{"Accediendo a linea: " + lineaInicialDeConjunto});
                        dato = lineaI.linea.get(palabra);
                        pasos.addRow(new Object[]{"Devolviendo dato a CPU. Palabra: " + palabra});
                        //resultados.addRow(new Object[]{dato});
                        lineaI.usado = 1; //Para LRU
                        lineaII.usado = 0; //Para LRU
                        lineaI.ordenLLegada++; //Para FIFO
                        lineaII.ordenLLegada++; //Para FIFO
                    } else if (lineaII.etiqueta != null && lineaII.etiqueta.equals(etiqueta)) { //Comprobando la segunda via del conjunto
                        aciertos++;
                        this.aciertos.setText(String.valueOf(aciertos));
                        pasos.addRow(new Object[]{"Acierto en Cache. Conjunto: " + numConjunto});
                        pasos.addRow(new Object[]{"Accediendo a linea: " + lineaInicialDeConjunto + 1});
                        dato = lineaII.linea.get(palabra);
                        pasos.addRow(new Object[]{"Devolviendo dato a CPU. Palabra: " + palabra});
                        //resultados.addRow(new Object[]{dato});
                        lineaII.usado = 1;
                        lineaI.usado = 0;
                        lineaII.ordenLLegada++;
                        lineaI.ordenLLegada++;
                    } else //Fallo de Cache. Recuperar desde MP
                    {
                        pasos.addRow(new Object[]{"Fallo en Cache"});
                        pasos.addRow(new Object[]{"Accediendo Cache. Conjunto: " + numConjunto});
                        pasos.addRow(new Object[]{"Devolviendo dato a CPU. Palabra: " + palabra});

                        if (metodoSustitucion == Cache.LRU) {
                            if (lineaI.usado + lineaII.usado == 0 || lineaI.usado == 0) { //El usado menos recientemente es la primera VIA
                                lineaI.etiqueta = etiqueta;
                                for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                    lineaI.linea.set(i, RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i));
                                    cache.setValueAt(RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i), lineaInicialDeConjunto, i + 1);
                                }
                                pasos.addRow(new Object[]{"Actualizando Cache. Linea: " + lineaInicialDeConjunto});
                                dato = lineaI.linea.get(palabra);
                                lineaI.usado = 1;
                                lineaII.usado = 0;
                                lineaI.ordenLLegada = 0;
                                lineaII.ordenLLegada++;
                            } else { //EL usado menos recientemente es la Segunda Via.
                                lineaII.etiqueta = etiqueta;
                                for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                    lineaII.linea.set(i, RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i));
                                    cache.setValueAt(RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i), lineaInicialDeConjunto + 1, i + 1);
                                }
                                pasos.addRow(new Object[]{"Actualizando Cache. Linea: " + (lineaInicialDeConjunto + 1)});
                                dato = lineaII.linea.get(palabra);
                                lineaII.usado = 1;
                                lineaI.usado = 0;
                                lineaII.ordenLLegada = 0;
                                lineaI.ordenLLegada++;
                            }
                        } else if (metodoSustitucion == Cache.FIFO) {
                            if (lineaI.ordenLLegada + lineaII.ordenLLegada == 0 || lineaI.ordenLLegada > lineaII.ordenLLegada) { //Verificar si la Primera Via es la que tiene más tiempo de estar
                                lineaI.etiqueta = etiqueta;
                                for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                    lineaI.linea.set(i, RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i));
                                    cache.setValueAt(RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i), lineaInicialDeConjunto, i + 1);
                                }
                                pasos.addRow(new Object[]{"Actualizando Cache. Linea: " + lineaInicialDeConjunto});
                                dato = lineaI.linea.get(palabra);
                                lineaI.usado = 1;
                                lineaII.usado = 0;
                                lineaI.ordenLLegada = 0;
                                lineaII.ordenLLegada++;
                            } else { //La segunda VIA es la que Entro primero
                                lineaII.etiqueta = etiqueta;
                                for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                    lineaII.linea.set(i, RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i));
                                    cache.setValueAt(RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i), lineaInicialDeConjunto + 1, i + 1);
                                }
                                pasos.addRow(new Object[]{"Actualizando Cache. Linea: " + (lineaInicialDeConjunto + 1)});
                                dato = lineaII.linea.get(palabra);
                                lineaII.usado = 1;
                                lineaI.usado = 0;
                                lineaII.ordenLLegada = 0;
                                lineaI.ordenLLegada++;
                            }
                        }
                    }
                    resultados.addRow(new Object[]{dato});
                } else if (tipoCorrespondencia == Cache.CORRESPONDENCIA_ASOCIATIVA) {
                    int lineaExito = -1;
                    for (int i = 0; i < lineasUsarAsociativa; i++) { //Verifiacndo si el dato ya esta en cache
                        Linea li = CACHE.get(i);
                        if (li.etiqueta != null && li.etiqueta.equals(etiqueta)) {
                            lineaExito = i;
                            break;
                        }
                    }
                    if (lineaExito != -1) { //Exito en la cache
                        aciertos++;
                        this.aciertos.setText(String.valueOf(aciertos));
                        pasos.addRow(new Object[]{"Acierto en Cache. Linea: " + lineaExito});
                        pasos.addRow(new Object[]{"Devolviendo dato a CPU. Palabra: " + palabra});
                        dato = CACHE.get(lineaExito).linea.get(palabra);
                        CALRU.remove(new Integer(lineaExito)); //Eliminar de su posicion actual
                        CALRU.add(lineaExito); //Pasar al mas usado recientemente
                    } else { //NO HAY EXITO EN CACHE
                        pasos.addRow(new Object[]{"Fallo en Cache"});
                        //pasos.addRow(new Object[]{"Actualizando Cache. Linea: " + numLinea});
                        pasos.addRow(new Object[]{"Devolviendo dato a CPU. Palabra: " + palabra});
                        int numElemEnCache = CAFIFO.size(); //verificar si la cache esta llena
                        if (numElemEnCache < lineasUsarAsociativa) { //Hay espacio en cache: Meter dato en una linea vacia
                            pasos.addRow(new Object[]{"Actualizando Cache. Linea: " + numElemEnCache});
                            Linea l = CACHE.get(numElemEnCache);
                            l.etiqueta = etiqueta;
                            for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                l.linea.set(i, RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i));
                                cache.setValueAt(RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i), numElemEnCache, i + 1);
                            }
                            dato = l.linea.get(palabra);
                            CAFIFO.add(numElemEnCache);
                            CALRU.add(numElemEnCache); //Usado mas recientemente
                        } else if (metodoSustitucion == Cache.LRU) { //Si la Cache esta llena, Usar un algoritmo de Sustitucion
                            int lineaReemplazar = CALRU.get(0);
                            pasos.addRow(new Object[]{"Actualizando Cache. Linea: " + lineaReemplazar});
                            CALRU.remove(0);
                            CALRU.add(lineaReemplazar); //Usado mas recientemente
                            CAFIFO.remove(new Integer(lineaReemplazar)); //Nuevo dato, pasar al ultimo de la cola
                            CAFIFO.add(lineaReemplazar);
                            Linea l = CACHE.get(lineaReemplazar);
                            l.etiqueta = etiqueta;
                            for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                l.linea.set(i, RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i));
                                cache.setValueAt(RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i), lineaReemplazar, i + 1);
                            }
                            dato = l.linea.get(palabra);
                        } else if (metodoSustitucion == Cache.FIFO) {
                            int lineaReemplazar = CAFIFO.get(0);
                            pasos.addRow(new Object[]{"Actualizando Cache. Linea: " + lineaReemplazar});
                            CAFIFO.remove(0);
                            CAFIFO.add(lineaReemplazar); //pasar al final de la cola
                            CALRU.remove(new Integer(lineaReemplazar));
                            CALRU.add(lineaReemplazar); // Nuevo usado mas recientemente
                            Linea l = CACHE.get(lineaReemplazar);
                            l.etiqueta = etiqueta;
                            for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                l.linea.set(i, RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i));
                                cache.setValueAt(RAM.get(numBloque * Cache.TAMANIO_BLOQUE + i), lineaReemplazar, i + 1);
                            }
                            dato = l.linea.get(palabra);
                        }
                    }
                    resultados.addRow(new Object[]{dato});
                }

                pasos.addRow(new Object[]{"-------------------------------------------"});
                Thread.sleep(1);
            }
            cache.fireTableDataChanged();
            pasos.fireTableDataChanged();
        } catch (InterruptedException ex) {
            Logger.getLogger(SimuladorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_procesarActionPerformed

    private void escribirRamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escribirRamActionPerformed

        String dir = direccionRAM.getText();
        int elementoSelect = metDireccionamientoRAM.getSelectedIndex();
        int corresp = this.correspondencia.getSelectedIndex();
        int reemplazo = sustitucion.getSelectedIndex();
        if (!dir.isEmpty() || elementoSelect == Direccionamiento.INDIRECTO_REGISTRO) {

            Peticion peti = new Peticion();
            peti.direccion = dir;
            peti.metodoDireccion = elementoSelect;

            switch (elementoSelect) {
                case Direccionamiento.DIRECTO:
                case Direccionamiento.PILA:

                    break;
                case Direccionamiento.DESPLAZA_RELATIVO:
                    String registroU = "PC";
                    String valoR = PC.getText();
                    if (valoR.isEmpty() || valoR == null) {
                        peti.valorRegistro = String.valueOf(0);

                    } else {
                        peti.valorRegistro = valoR;

                    }
                    break;
                case Direccionamiento.INDIRECTO_REGISTRO:
                case Direccionamiento.DESPLAZA_REGISTRO_BASE:
                case Direccionamiento.INDEXADO:
                    String registroUsar = (String) regUsarRAM.getSelectedItem();
                    String valorRegistro = null;
                    if (registroUsar == "AX") {
                        valorRegistro = txtAX.getText();
                    } else if (registroUsar == "BX") {
                        valorRegistro = txtBX.getText();
                    } else if (registroUsar == "CX") {
                        valorRegistro = txtCX.getText();
                    } else if (registroUsar == "DX") {
                        valorRegistro = txtDX.getText();
                    } else if (registroUsar == "SP") {
                        valorRegistro = txtSP.getText();
                    } else if (registroUsar == "BP") {
                        valorRegistro = txtBP.getText();
                    } else if (registroUsar == "SI") {
                        valorRegistro = txtSI.getText();
                    } else if (registroUsar == "DI") {
                        valorRegistro = txtDI.getText();
                    } else if (registroUsar == "DS") {
                        valorRegistro = txtDS.getText();
                    } else if (registroUsar == "ES") {
                        valorRegistro = txtES.getText();
                    } else if (registroUsar == "SS") {
                        valorRegistro = txtSS.getText();
                    } else if (registroUsar == "CS") {
                        valorRegistro = txtCS.getText();
                    } else if (registroUsar == "PC") {
                        valorRegistro = PC.getText();
                    }
                    if (valorRegistro.isEmpty() || valorRegistro == null) {
                        valorRegistro = "0";
                    }
                    peti.valorRegistro = valorRegistro;
                    break;
            }

            DefaultTableModel modelo = (DefaultTableModel) tablaLineasCache.getModel();

            String datoEscribir = txtEscribirRAM.getText();

            if (!datoEscribir.isEmpty()) {
                String direccion = Direccionamiento.generarDireccionFisica(peti);
                int bloque = Cache.generarBloqueMP(direccion);
                int palabra = Cache.generarPalabra(direccion);

                String eti = Cache.generarEtiqueta(direccion, corresp);

                if (corresp == Cache.CORRESPONDENCIA_DIRECTA) {
                    int linea = bloque % numLineas;
                    RAM.set(bloque * Cache.TAMANIO_BLOQUE + palabra, datoEscribir);
                    Linea l = CACHE.get(linea);
                    l.etiqueta = eti;
                    for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                        l.linea.set(i, RAM.get(bloque * Cache.TAMANIO_BLOQUE + i));
                        modelo.setValueAt(RAM.get(bloque * Cache.TAMANIO_BLOQUE + i), linea, i + 1);
                    }
                    JOptionPane.showMessageDialog(this, "Linea Cache Actualizada: " + linea);
                } else if (corresp == Cache.CORRESPONDENCIA_POR_CONJUNTO) {

                    int conjunto = bloque % numConjuntos;
                    int lineaInicialDeConjunto = conjunto * 2;
                    Linea lineaI = CACHE.get(lineaInicialDeConjunto);
                    Linea lineaII = CACHE.get(lineaInicialDeConjunto + 1);
                    RAM.set(bloque * Cache.TAMANIO_BLOQUE + palabra, datoEscribir);
                    boolean ausenteCache = true;

                    //Solo actualizar si el dato ya esta en cache
                    if (lineaI.etiqueta != null && lineaI.etiqueta.equals(eti)) { //actualizar la primera linea
                        lineaI.linea.set(palabra, datoEscribir);
                        lineaI.usado = 1;
                        lineaII.usado = 0;
                        modelo.setValueAt(datoEscribir, lineaInicialDeConjunto, palabra + 1);
                        JOptionPane.showMessageDialog(this, "La linea de cache: " + lineaInicialDeConjunto + ", fue actualizada");
                        ausenteCache = false;
                    } else if (lineaII.etiqueta != null && lineaII.etiqueta.equals(eti)) { //actualizar la segunda linea
                        lineaII.linea.set(palabra, datoEscribir);
                        lineaII.usado = 1;
                        lineaI.usado = 0;
                        modelo.setValueAt(datoEscribir, lineaInicialDeConjunto + 1, palabra + 1);
                        JOptionPane.showMessageDialog(this, "La linea de cache: " + (lineaInicialDeConjunto + 1) + ", fue actualizada");
                        ausenteCache = false;
                    }

                    //Si el dato no esta en cache
                    if (ausenteCache) {
                        if (reemplazo == Cache.LRU) {
                            if (lineaI.usado + lineaII.usado == 0 || lineaI.usado == 0) { //El usado menos recientemente es la primera VIA
                                lineaI.etiqueta = eti;
                                for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                    lineaI.linea.set(i, RAM.get(bloque * Cache.TAMANIO_BLOQUE + i));
                                    modelo.setValueAt(RAM.get(bloque * Cache.TAMANIO_BLOQUE + i), lineaInicialDeConjunto, i + 1);
                                }
                                lineaI.usado = 1;
                                lineaII.usado = 0;
                                lineaI.ordenLLegada = 0;
                                lineaII.ordenLLegada++;
                                JOptionPane.showMessageDialog(this, "La linea de cache: " + (lineaInicialDeConjunto) + ", fue actualizada");
                            } else { //EL usado menos recientemente es la Segunda Via.
                                lineaII.etiqueta = eti;
                                for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                    lineaII.linea.set(i, RAM.get(bloque * Cache.TAMANIO_BLOQUE + i));
                                    modelo.setValueAt(RAM.get(bloque * Cache.TAMANIO_BLOQUE + i), lineaInicialDeConjunto + 1, i + 1);
                                }
                                lineaII.usado = 1;
                                lineaI.usado = 0;
                                lineaII.ordenLLegada = 0;
                                lineaI.ordenLLegada++;
                                JOptionPane.showMessageDialog(this, "La linea de cache: " + (lineaInicialDeConjunto + 1) + ", fue actualizada");
                            }
                        } else if (reemplazo == Cache.FIFO) {
                            if (lineaI.ordenLLegada + lineaII.ordenLLegada == 0 || lineaI.ordenLLegada > lineaII.ordenLLegada) { //Verificar si la Primera Via es la que tiene más tiempo de estar
                                lineaI.etiqueta = eti;
                                for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                    lineaI.linea.set(i, RAM.get(bloque * Cache.TAMANIO_BLOQUE + i));
                                    modelo.setValueAt(RAM.get(bloque * Cache.TAMANIO_BLOQUE + i), lineaInicialDeConjunto, i + 1);
                                }
                                lineaI.usado = 1;
                                lineaII.usado = 0;
                                lineaI.ordenLLegada = 0;
                                lineaII.ordenLLegada++;
                                JOptionPane.showMessageDialog(this, "La linea de cache: " + (lineaInicialDeConjunto) + ", fue actualizada");
                            } else { //La segunda VIA es la que Entro primero
                                lineaII.etiqueta = eti;
                                for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                    lineaII.linea.set(i, RAM.get(bloque * Cache.TAMANIO_BLOQUE + i));
                                    modelo.setValueAt(RAM.get(bloque * Cache.TAMANIO_BLOQUE + i), lineaInicialDeConjunto + 1, i + 1);
                                }
                                lineaII.usado = 1;
                                lineaI.usado = 0;
                                lineaII.ordenLLegada = 0;
                                lineaI.ordenLLegada++;
                                JOptionPane.showMessageDialog(this, "La linea de cache: " + (lineaInicialDeConjunto + 1) + ", fue actualizada");
                            }
                        }
                    }

                } else if (corresp == Cache.CORRESPONDENCIA_ASOCIATIVA) {
                    RAM.set(bloque * Cache.TAMANIO_BLOQUE + palabra, datoEscribir);
                    int lineaEncontrado = -1;
                    for (int i = 0; i < lineasUsarAsociativa; i++) { //Buscando si el dato ya esta en cache para actualizarlo
                        Linea l = CACHE.get(i);
                        if (l.etiqueta != null && l.etiqueta.equals(eti)) {
                            lineaEncontrado = i;
                            break;
                        }
                    }
                    if (lineaEncontrado != -1) { //El dato si estaba ya en cache
                        Linea l = CACHE.get(lineaEncontrado);
                        for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) { //Actualizando Cache
                            l.linea.set(i, RAM.get(bloque * Cache.TAMANIO_BLOQUE + i));
                            modelo.setValueAt(RAM.get(bloque * Cache.TAMANIO_BLOQUE + i), lineaEncontrado, i + 1);
                        }
                        CALRU.remove(new Integer(lineaEncontrado)); //Establecer como el usado más recientemente
                        CALRU.add(lineaEncontrado);
                        JOptionPane.showMessageDialog(this, "La linea de cache: " + lineaEncontrado + ", fue actualizada");
                    } else {
                        int numElemEnCache = CAFIFO.size();
                        if (numElemEnCache < lineasUsarAsociativa) { //Verificar que hayan posiciones libres para escribir
                            Linea l = CACHE.get(numElemEnCache);
                            l.etiqueta = eti;
                            for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                l.linea.set(i, RAM.get(bloque * Cache.TAMANIO_BLOQUE + i));
                                modelo.setValueAt(RAM.get(bloque * Cache.TAMANIO_BLOQUE + i), numElemEnCache, i + 1);
                            }
                            CALRU.add(numElemEnCache);
                            CAFIFO.add(numElemEnCache);
                            JOptionPane.showMessageDialog(this, "La linea de cache: " + numElemEnCache + ", fue actualizada");
                        }else if(reemplazo == Cache.LRU){ //Si la cache esta llena usar algoritmo de reemplazo
                            int lineaReemplazo = CALRU.get(0);
                            CALRU.remove(0);
                            CALRU.add(lineaReemplazo); //Poner como usado más recientemente
                            CAFIFO.remove(new Integer(lineaReemplazo));
                            CAFIFO.add(lineaReemplazo);
                            Linea l = CACHE.get(lineaReemplazo);
                            l.etiqueta = eti;
                            for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                l.linea.set(i, RAM.get(bloque * Cache.TAMANIO_BLOQUE + i));
                                modelo.setValueAt(RAM.get(bloque * Cache.TAMANIO_BLOQUE + i), lineaReemplazo, i + 1);
                            }
                            JOptionPane.showMessageDialog(this, "La linea de cache: " + lineaReemplazo + ", fue actualizada");
                        }else if(reemplazo == Cache.FIFO){
                            int lineaReemplazo = CAFIFO.get(0);
                            CAFIFO.remove(0);
                            CAFIFO.add(lineaReemplazo);
                            CALRU.remove(new Integer(lineaReemplazo));
                            CALRU.add(lineaReemplazo);
                            Linea l = CACHE.get(lineaReemplazo);
                            l.etiqueta = eti;
                            for (int i = 0; i < Cache.TAMANIO_BLOQUE; i++) {
                                l.linea.set(i, RAM.get(bloque * Cache.TAMANIO_BLOQUE + i));
                                modelo.setValueAt(RAM.get(bloque * Cache.TAMANIO_BLOQUE + i), lineaReemplazo, i + 1);
                            }
                            JOptionPane.showMessageDialog(this, "La linea de cache: " + lineaReemplazo + ", fue actualizada");
                        }
                    }
                }

            } else {
                JOptionPane.showMessageDialog(this, "El campo de datos no puede estar vacio");
            }

            modelo.fireTableDataChanged();

        } else {
            JOptionPane.showMessageDialog(this, "El campo de direcciones no puede estar basio", "No Nulo", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_escribirRamActionPerformed

    private void txtRestablecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRestablecerActionPerformed
        CAFIFO = null;
        CAFIFO = new ArrayList<>();
        
        CALRU = null;
        CALRU = new ArrayList<>();
        
        CACHE = null;
        CACHE = new ArrayList<>();
        
        DefaultTableModel modelo = (DefaultTableModel)tablaLineasCache.getModel();
        for(int i=0;i<numLineas;i++){
            modelo.removeRow(0);
        }
        
        for (int j = 0; j < numLineas; j++) {
            Linea l = new Linea();
            l.inicializarElementos();
            CACHE.add(l);

            modelo.addRow(new Object[]{j, l.linea.get(0), l.linea.get(1), l.linea.get(2), l.linea.get(3), l.linea.get(4), l.linea.get(5), l.linea.get(6), l.linea.get(7)});
        }
        
        modelo.fireTableDataChanged();
    }//GEN-LAST:event_txtRestablecerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimuladorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimuladorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimuladorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimuladorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimuladorFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField PC;
    private javax.swing.JTextField aciertos;
    private javax.swing.JButton agregarPeticion;
    private javax.swing.JComboBox<String> correspondencia;
    private javax.swing.JTextField direccionCPU;
    private javax.swing.JTextField direccionRAM;
    private javax.swing.JButton eliminarPeticion;
    private javax.swing.JButton escribirRam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelCPU;
    private javax.swing.JPanel jPanelCache;
    private javax.swing.JPanel jPanelIngresarCPU;
    private javax.swing.JPanel jPanelIngresarCPU1;
    private javax.swing.JPanel jPanelPeticionesCPU;
    private javax.swing.JPanel jPanelRAM;
    private javax.swing.JPanel jPanelRegistrosCPU;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JComboBox<String> metDireccionamiento;
    private javax.swing.JComboBox<String> metDireccionamientoRAM;
    private javax.swing.JButton procesar;
    private javax.swing.JComboBox<String> regUsar;
    private javax.swing.JComboBox<String> regUsarRAM;
    private javax.swing.JComboBox<String> sustitucion;
    private javax.swing.JTable tablaLineasCache;
    private javax.swing.JTable tablaPasosRealizados;
    private javax.swing.JTable tablaPeticiones;
    private javax.swing.JTable tablaResultados;
    private javax.swing.JTextField txtAX;
    private javax.swing.JTextField txtBP;
    private javax.swing.JTextField txtBX;
    private javax.swing.JTextField txtCS;
    private javax.swing.JTextField txtCX;
    private javax.swing.JTextField txtDI;
    private javax.swing.JTextField txtDS;
    private javax.swing.JTextField txtDX;
    private javax.swing.JTextField txtES;
    private javax.swing.JTextField txtEscribirRAM;
    private javax.swing.JButton txtRestablecer;
    private javax.swing.JTextField txtSI;
    private javax.swing.JTextField txtSP;
    private javax.swing.JTextField txtSS;
    // End of variables declaration//GEN-END:variables
}
